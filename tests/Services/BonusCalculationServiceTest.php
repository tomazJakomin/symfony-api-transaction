<?php

namespace App\Tests\Services;

use App\Services\BonusCalculationService;
use App\Services\BonusCalculationServiceInterface;
use PHPUnit\Framework\TestCase;

class BonusCalculationServiceTest extends TestCase
{
	/**
	 * @var BonusCalculationService
	 */
	private $testObject;

	protected function setUp(): void
	{
		parent::setUp(); // TODO: Change the autogenerated stub
		$this->testObject = new BonusCalculationService();
	}

	/**
	 * @dataProvider getTestTransactionNumbers
	 */
	public function testIsEligibleForBonus(int $numberOfTransactions, bool $result): void
	{
		$this->assertEquals($this->testObject->isEligibleForBonus($numberOfTransactions), $result);
	}

	public function getTestTransactionNumbers()
	{
		return [
			[0, false],
			[1, false],
			[2, false],
			[3, true],
			[4, false],
			[5, false],
			[6, true],
			[7, false],
			[300, true],
		];
	}

	/**
	 * @dataProvider getTestDiscountData
	 */
	public function testCalculatedBonus(int $valueForDiscount, int $discountPercent, float $result): void
	{
		$this->assertEquals($result, $this->testObject->getCalculatedBonus($valueForDiscount, $discountPercent));
	}

	public function getTestDiscountData(): array
	{
		return [
			[50, 15, 7.5],
			[100, 20, 20],
			[200, 5, 10],
		];
	}
}